FROM neo4j:5.13.0 as builder

# Install required packages
RUN apt-get update && apt-get install -y \
    curl \
    unzip \
    && rm -rf /var/lib/apt/lists/*

# Install uv
COPY --from=ghcr.io/astral-sh/uv:latest /uv /uvx /bin/

WORKDIR /app

# Copy Python dependencies
COPY pyproject.toml uv.lock ./
COPY packages packages
COPY resources/ /resources/
RUN uv sync --all-packages

COPY config/neo4j.conf /var/lib/neo4j/conf/neo4j.conf
# Create data directory
RUN mkdir -p /mnt/snomed

# Build arguments
ARG SNOMED_DIR=""
ARG SNOMED_API_KEY=""
ARG SNOMED_EDITION="international"
ARG SNOMED_VERSION="latest"
ARG SNOMED_SLIM_HIERARCHIES=""
ARG SNOMED_SLIM_RELATIONSHIPS=""
ARG SNOMED_SLIM_MAX_DEPTHS="20"
ARG SNOMED_SLIM_SOFT_DELETE="false"
ARG SNOMED_KEEP_INACTIVE="false"

# Copy SNOMED data if provided via build context
RUN if [ -n "$SNOMED_DIR" ] && [ -d "/resources/$SNOMED_DIR" ]; then \
    echo "Copying SNOMED data from build context" && \
    cp -r "/resources/$SNOMED_DIR"/* /mnt/snomed/; \
    fi

# Copy Neo4j configuration
COPY config/neo4j.conf /var/lib/neo4j/conf/neo4j.conf

# Set Neo4j environment for builder stage
ENV NEO4J_AUTH=neo4j/neo4jneo4j \
    NEO4J_server_memory_heap_initial__size=1G \
    NEO4J_server_memory_heap_max__size=2G \
    NEO4J_server_memory_pagecache_size=1G \
    NEO4J_PLUGINS='["apoc"]' \
    NEO4J_dbms_security_auth__enabled=true

# Set environment variables for the importer script
ENV SNOMED_API_KEY=${SNOMED_API_KEY} \
    SNOMED_EDITION=${SNOMED_EDITION} \
    SNOMED_VERSION=${SNOMED_VERSION} \
    SNOMED_SLIM_HIERARCHIES=${SNOMED_SLIM_HIERARCHIES} \
    SNOMED_SLIM_RELATIONSHIPS=${SNOMED_SLIM_RELATIONSHIPS} \
    SNOMED_NEO4J_PASSWORD=neo4jneo4j \
    SNOMED_NEO4J_HOST=localhost  \
    SNOMED_NEO4J_USER=neo4j \
    SNOMED_IMPORT_BATCH=1000 \
    SNOMED_DIR=/mnt/snomed \
    SNOMED_SLIM_DRY_RUN=false

# Start Neo4j, run importer, then stop Neo4j
RUN echo "Starting Neo4j and loading SNOMED data" && \
    /startup/docker-entrypoint.sh neo4j &> /tmp/neo4j.log & \
    NEO4J_PID=$! && \
    echo "Waiting for Neo4j to start..." && \
    timeout=120 && \
    while [ $timeout -gt 0 ]; do \
    if curl -s -f http://localhost:7474/browser/ >/dev/null 2>&1 && \
    cypher-shell -u ${SNOMED_NEO4J_USER} -p ${SNOMED_NEO4J_PASSWORD} "RETURN 1" >/dev/null 2>&1; then \
    echo "Neo4j started successfully and authentication is working."; \
    break; \
    fi; \
    if [ $((timeout % 10)) -eq 0 ]; then \
    echo "Still waiting... ($timeout seconds remaining)"; \
    fi; \
    sleep 2; \
    timeout=$((timeout-2)); \
    done && \
    if [ $timeout -le 0 ]; then \
    echo "ERROR: Neo4j failed to start within 120 seconds"; \
    echo "Neo4j logs:"; \
    cat /tmp/neo4j.log; \
    exit 1; \
    fi && \
    echo "Neo4j is ready, running importer..." && \
    uv run packages/snomed-neo4j-core/scripts/snomed_importer.py && \
    echo "Import completed, stopping Neo4j..." && \
    neo4j stop && \
    wait $NEO4J_PID && \
    echo "SNOMED CT data loaded successfully."

FROM neo4j:5.13.0

COPY --from=builder /data /data
COPY config/neo4j.conf /var/lib/neo4j/conf/neo4j.conf

ENV NEO4J_AUTH=neo4j/neo4jneo4j \
    NEO4J_server_memory_heap_initial__size=1G \
    NEO4J_server_memory_heap_max__size=2G \
    NEO4J_server_memory_pagecache_size=1G \
    NEO4J_PLUGINS='["apoc"]'

EXPOSE 7474 7473 7687

ENTRYPOINT ["/startup/docker-entrypoint.sh"]
CMD ["neo4j"]